算法常见技巧
--- 递归 ---
1. 确定递归函数的参数和返回值
2. 确定中止条件
3. 确定单层递归的逻辑

--- 回溯 ---
1. 回溯函数模板返回值以及参数（一般为void）
2. 回溯函数终止条件
3. 回溯搜索的遍历过程

void backtracking(参数) {
	if (终止条件) {
		存放结果;
		return;
	}
	
	for (选择：本层集合中的元素(树中节点孩子的数量就是集合的大小)) {
		处理节点;
		backtracking(路径, 选择列表); // 递归
		回溯, 撤销处理结果;
	}
}

--- 动态规划 ---
1. 确定dp数组以及下标的含义
2. 确定递推公式
3. dp数组初始化
4. 确定遍历顺序
（背包容量在内层，表示组合；背包容量在外层，表示排列）
5. 举例推导dp数组
	背包问题：
		问能否装满（或者最多装多少）：dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);
		问装满背包有几种方法：dp[j] += dp[j - nums[i]]
		问背包装满最大价值： dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);
		问装满背包所有物品最小个数： dp[j] = Math.min(do[j - coins[i]] + 1, dp[j]);